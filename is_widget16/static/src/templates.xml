<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="is_widget16.Widget02" owl="1">
        <t t-if="props.readonly">
            <pre t-esc="props.value" class="bg-primary text-white p-3 rounded"/>
        </t>
        <t t-else="">
            <textarea class="o_codeview" t-att-value="props.value"/>
        </t>
    </t>


    <!-- 
    export const standardFieldProps = {
        id: { type: String, optional: true },
        name: { type: String, optional: true },
        readonly: { type: Boolean, optional: true },
        record: { type: Object, optional: true },
        type: { type: String, optional: true },
        update: { type: Function, optional: true },
        value: true,
        decorations: { type: Object, optional: true },
        setDirty: { type: Function, optional: true },
    } 
    
    props.records est un Recordobjet défini dans odoo/addons/web/static/src/views/basic_relational_model.js. Il contient de nombreuses informations relatives à l'enregistrement actuel affiché dans la vue. Les propriétés notables de cet objet sont :
    data : contient toutes les données réelles de l'enregistrement donné.
    mode : de la vue d'enregistrement, "modifier" ou "lecture seule".
    fields : une clé, magasin de valeur de tous les autres champs.
    activeFields : les champs utilisés dans la vue.
    resModel : par exemple "produit.template".
    model : la classe JavaScript réelle RelationalModelavec toutes ses méthodes.
    context : contient l'objet "contexte" habituel d'Odoo avec l'identifiant de l'utilisateur, le fuseau horaire, etc.
    -->
    <t t-name="is_widget16.Widget05" owl="1">
        <div t-esc="props.value" class="bg-info text-white p-3 rounded"/>
        <div>props.id = <span t-esc="props.id"/></div>
        <div>props.name = <span t-esc="props.name"/></div>
        <div>props.readonly = <span t-esc="props.readonly"/></div>
        <div>props.type = <span t-esc="props.type"/></div>
        <div>props.record.data = <span t-esc="props.record.data"/></div>
        <div>props.record.context = <span t-esc="props.record.context"/></div>
    </t>


    <!-- HtmlClick -->
    <t t-name="is_widget16.HtmlClick" owl="1">
        <div t-out="props.value or ''" t-on-click="onGlobalClick" />
    </t>


    <!-- MarkdownField -->
    <t t-name="is_widget16.MarkdownField" owl="1">
        <t t-if="props.readonly">
            <div class="o_readonly" t-out="markupValue"/>
        </t>
        <t t-else="">
            <textarea 
                t-ref="textarea" 
                t-att-value="props.value" 
                t-on-blur="commitChanges"
                class="o_markdownview" rows="3" style="background-color:gray"  
            />
        </t>
    </t>


    <!-- Compteur -->
    <t t-name="is_widget16.Compteur" owl="1">
        <button class="btn btn-primary btn-sm" t-on-click="decrement">-</button>
        <span style="margin-left:5px;margin-right:5px"><t t-esc="props.value"/></span>
        <button class="btn btn-primary btn-sm" t-on-click="increment">+</button>
    </t>


    <!-- Negatif -->
    <t t-name="is_widget16.Negatif" owl="1">
        <t t-if="props.readonly">
            <span t-if="props.value!=0"
                t-esc="formattedValue"
                t-attf-style="{{ props.value &lt; 0 ? 'color:red' : 'color:blue'}}"
            />
        </t>
        <input 
            t-else="" 
            t-att-id="props.id" 
            t-ref="numpadDecimal"  
            t-att-placeholder="props.placeholder" 
            t-att-type="props.inputType" 
            inputmode="numeric" 
            class="o_input" 
            t-att-step="props.step"
        />
    </t>


    <!-- CBN -->
    <t t-name="is_widget16.CBN" owl="1">
        <button class="btn btn-primary btn-sm" t-on-click="test">TEST</button>
        <div t-out="props.value or ''" t-on-click="onClick" />


        <!-- <div style="margin-top:3px; background-color:gray">
            <t t-out="props.value" t-on-click="onClick"/>
        </div> -->
    </t>




</templates>
